version: '3.8'

services:
  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - BIGQUERY_DATASET_ID=${BIGQUERY_DATASET_ID}
      - TOMTOM_API_KEY=${TOMTOM_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/drivewise_ai
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
    volumes:
      - ./backend:/app
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/app/gcp-key.json:ro
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=drivewise_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Data Pipeline Worker
  data-pipeline:
    build:
      context: ./data-pipeline
      dockerfile: Dockerfile
    environment:
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - BIGQUERY_DATASET_ID=${BIGQUERY_DATASET_ID}
      - TOMTOM_API_KEY=${TOMTOM_API_KEY}
      - REDIS_URL=redis://redis:6379/0
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
    volumes:
      - ./data-pipeline:/app
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/app/gcp-key.json:ro
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Jupyter Notebook for ML Development
  jupyter:
    build:
      context: ./ml-models
      dockerfile: Dockerfile.jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - BIGQUERY_DATASET_ID=${BIGQUERY_DATASET_ID}
      - GOOGLE_APPLICATION_CREDENTIALS=/home/jovyan/gcp-key.json
    volumes:
      - ./ml-models:/home/jovyan/work
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/home/jovyan/gcp-key.json:ro
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge